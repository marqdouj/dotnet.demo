@page "/pkg-general-statemodel"
@rendermode InteractiveServer

<PageTitle>@subject</PageTitle>

<FluentLayout>
    <PkgPageHeader Header="@subject"
                   HRefCode="@hRefCode"
                   Subject="@subject">
          <Content>
              <FluentLabel>
                Provides a base class for models that support state change notification, including suppression of notifications.
              </FluentLabel>
          </Content>     
    </PkgPageHeader>

    <FluentCard>
        <FluentStack Orientation="Orientation.Vertical">
            <FluentLabel>
                In this example, the 'TestModel' class has derived from 'StateModel'.<br />
                Is has two properties, Name and Description.<br />
                Enter a value in either property. The change notification occurs
                when the value is updated; either by pressing 'Enter' or changing focus.<br /><br />
            </FluentLabel>
        </FluentStack>

        <FluentTextField @bind-Value="@model.Name">Name</FluentTextField>
        <FluentTextField @bind-Value="@model.Description">Description</FluentTextField>
        <br />
        <br />
        <FluentCheckbox @bind-Value="@model.SuppressNotifications" Label="Suppress Notifications" />
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel>Change Notifications:</FluentLabel>
            
            <FluentButton Appearance="Appearance.Accent"
						  IconStart="@(new Icons.Regular.Size20.ArrowReset())"
                          Title="Reset"
						  OnClick="Reset" />
        </FluentStack>
        <div style="height:200px;overflow:auto;">
            <ul>
                @{
                    foreach (var item in changes)
                    {
                        <li>@item</li>
                    }
                }
            </ul>
        </div>

    </FluentCard>

</FluentLayout>

@code {
    private readonly string hRefCode = HRefCodeSource.General.CodeUrl("StateModel.cs");
    private readonly string subject = nameof(StateModel);
    private readonly TestModel model = new();
    private readonly List<string> changes = [];

    protected override void OnInitialized()
    {
        model.StateChanged += (string propertyName) =>
        {
            if (!model.SuppressNotifications)
            {
                changes.Add($"{propertyName} : {DateTime.Now}");
            }
        };

    }

    private void Reset()
    {
        changes.Clear();
    }

	private class TestModel : StateModel
    {
        #region Name
        private string? name;
        public string? Name { get => name; set => SetValue(ref name, value); }
        #endregion

        #region Description
        private string? description;
        public string? Description { get => description; set => SetValue(ref description, value); }
        #endregion
    }
}
