@page "/pkg-general-exceptions"
@rendermode InteractiveServer
@inject IDialogService DialogService

<PageTitle>@subject</PageTitle>

<FluentLayout>
    <PkgPageHeader Header="@subject"
				   HRefCode="@hRefCode"
                   Subject="@subject"/>

    <FluentStack Orientation="Orientation.Vertical">
        <FluentCard MinimalStyle="true">
            <FluentLabel>Generated Exception:</FluentLabel>
            <CodeText>@exText</CodeText>
        </FluentCard>

        <FluentGrid>
            <FluentGridItem>
                <FluentCard>
                    <FluentLabel Typo="Typography.H5">Exception.ToMessage()</FluentLabel>
                    <p>Resolves all messages as a string and then displays the message in a Fluent dialog</p>
                    <FluentButton Appearance="Appearance.Accent" OnClick="ToMessageDialog">Test</FluentButton>
                    <FluentLabel Typo="Typography.H6">Output:</FluentLabel>
                    <FluentLabel>@ToMessageValue</FluentLabel>
                </FluentCard>
            </FluentGridItem>
            <FluentGridItem>
                <FluentCard>
                    <FluentLabel Typo="Typography.H5">Exception.ToMessageList()</FluentLabel>
                    <p>Resolves all messages as a List, and then displays the messages in a Fluent dialog</p>
                    <FluentButton Appearance="Appearance.Accent" OnClick="ToMessageListDialog">Test</FluentButton>

                    <FluentLabel Typo="Typography.H6">Output:</FluentLabel>
                    @foreach (var item in ToMessageListValue)
                    {
                        <FluentLabel>@item</FluentLabel>
                    }
                </FluentCard>
            </FluentGridItem>
        </FluentGrid>
    </FluentStack>
</FluentLayout>

@code {
    private Exception ex = new Exception("Outer Exception.", new Exception("Inner Exception.", new Exception("Inner Inner Exception.")));
    private readonly string exText = "new Exception(\"Outer Exception.\", new Exception(\"Inner Exception.\", new Exception(\"Inner Inner Exception.\")))";
    private string ToMessageValue = "";
    private List<string> ToMessageListValue = [];
    private readonly string hRefCode = HRefCodeSource.General.CodeUrl("Extensions/Exceptions.cs");
    private readonly string subject = "Exception Extensions";

    private async Task ToMessageDialog()
    {
        try
        {
            throw ex;
        }
        catch (Exception ex)
        {
            ToMessageValue = ex.ToMessage();

            await DialogService.ShowErrorAsync(GetDialogMessage(ToMessageValue.Split("\n")));
        }
    }

    private async Task ToMessageListDialog()
    {
        try
        {
            throw ex;
        }
        catch (Exception ex)
        {
            ToMessageListValue = ex.ToMessageList();

            await DialogService.ShowErrorAsync(GetDialogMessage(ex.ToMessageList()));
        }
    }

    private string GetDialogMessage(IEnumerable<string> items)
    {
        var text = new System.Text.StringBuilder();

        foreach (var msg in items)
        {
            text.Append("<p>");
            text.Append(msg);
            text.Append("</p>");
        }

        return text.ToString();
    }
}