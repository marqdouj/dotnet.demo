@page "/pkg-components-jslogger"
@using Marqdouj.DotNet.Web.Components.Logger
@rendermode InteractiveServer
@inject IJSLoggerService<PkgJSLogger> LoggerService

<PageTitle>Components - JS Logger</PageTitle>

<FluentLayout>
    <PkgPageHeader Header="@subject"
                   HRefCode="@hRefCode"
                   Subject="@subject">
        <FluentLabel>
            JS Logger Service logs message to the browser console.<br />
            Open the 'Developer Tools' to view the output in the browser console.<br />
            You may also have to adjust the log level for console messages.
        </FluentLabel>
    </PkgPageHeader>

    <FluentCard>
        <FluentLabel Typo="Typography.Subject">Logger Module (IJSObjectReference)</FluentLabel>
        <FluentToolbar>
            <FluentButton @onclick="(() => TestLogger())">Test All</FluentButton>
            <FluentSpacer />
            <FluentButton @onclick="(() => TestRaw())">Test Raw</FluentButton>
            <FluentButton @onclick="(() => TestScope())">Test Scope</FluentButton>
            <FluentSpacer />
            <FluentButton @onclick="(() => TestLogger(LogLevel.Trace))">Trace</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Debug))">Debug</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Information))">Information</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Warning))">Warning</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Error))">Error</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Critical))">Critical</FluentButton>
        </FluentToolbar>
    </FluentCard>
</FluentLayout>

@code {
    private readonly string hRefCode = HRefCodeSource.Components.CodeUrl("Logger/JSLogger.cs");
    private readonly string subject = "JS Logger Service";

    protected override void OnInitialized()
    {
        LoggerService.Config.SetLevel(LogLevel.Trace, LogLevel.Critical);
    }

    private async Task TestRaw()
    {
        await LoggerService.LogRaw("Test 'Raw' from Module", "color: orange; font-size: 20px;");
    }

    private void TestScope()
    {
        using (var scope = LoggerService.BeginScope("TestScope"))
        {
            var t = DateTime.Now.ToShortTimeString();
            LoggerService.LogInformation($"'Test Scope 1 of 3' from LoggerService : {t}");
            LoggerService.LogInformation($"'Test Scope 2 of 3' from LoggerService : {t}");
            LoggerService.LogInformation($"'Test Scope 3 of 3' from LoggerService : {t}");
        }
    }

    private async Task TestLogger()
    {
        await LoggerService.LogRaw("Test 'Raw' from Module", "color: orange; font-size: 20px;");
        await LoggerService.Test("Test All from Module");
    }

    private async Task TestLogger(LogLevel level)
    {
        var eventName = $"TestLogger-LoggerService";

        switch (level)
        {
            case LogLevel.Trace:
                await LoggerService.LogTrace("Trace message from logger demo page.", eventName);
                break;
            case LogLevel.Debug:
                await LoggerService.LogDebug("Debug message from logger demo page.", eventName);
                break;
            case LogLevel.Information:
                await LoggerService.LogInformation("Information message from logger demo page.", eventName);
                break;
            case LogLevel.Warning:
                await LoggerService.LogWarning("Warning message from logger demo page.", eventName);
                break;
            case LogLevel.Error:
                await LoggerService.LogError("Error message from logger demo page.", eventName);
                try
                {
                    throw new Exception("try/catch Exception from logger demo page.");
                }
                catch (Exception ex)
                {
                    await LoggerService.LogError(ex, eventName);
                }

                break;
            case LogLevel.Critical:
                await LoggerService.LogCritical("Critical message from logger demo page.", eventName);
                break;
            default:
                break;
        }
    }
}
